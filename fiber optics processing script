
% 1. ask for start and end of relevant strain sections
% 2. get table of those strain sections
% 3. get graph over time of strain sections 


% global length_f 
% 
% function zero = radius_of_curvature(r)
%     zero = r*acos(1 - (0.0026*0.0026)/2*(r*r)) - length_f 
% end

function [grwd_x, grwd_y, grwd_side1, grwd_side2, grwd_r_of_curv] = get_retaining_wall_data(grwdchk1, grwdchk2, grwdchk3, grwdchk4, grwd_datatable)
    grwd_x = [];
    grwd_y = [];
    grwd_side1 = [];
    grwd_side2 = [];
    grwd_r_of_curv = [];
    j = grwdchk1; %S1
    k = grwdchk2;
    grwd_x_current = 0;
    while j < grwdchk3 & k > grwdchk4 %check from S1 to S2 & S4 to S3
        %grwd_x(end+1) = grwd_datatable{2, j}; %

        grwd_x(end+1) = grwd_x_current + 0.0026; %0.0026 is the length between gage points; make this value inputtable?
        grwd_x_current = grwd_x_current + 0.0026;
        average_strain = (grwd_datatable{3, j} + grwd_datatable{3, k})/2;
        grwd_y(end+1) = average_strain;
        grwd_side1(end+1) = grwd_datatable{3, j};
        grwd_side2(end+1) = grwd_datatable{3, k} 

        %finding strained length:
        %final length = initial length + initial length*strain
        
        length_f = 0.0026 + 0.0026*average_strain/1000000 %divide by 1 million because strain is in units of microstrain

        %finding radius of curvature
        %equation is length_f = r*cos-1(1 - length_i^2 / 2r^2)
        %cannot be solved analytically so rootfinding is used
        %this function is defined here because it changes depending on
        %length_f; this is also why length_f is global, otherwise there
        %would be more than 1 argument in the function



           y=1;
   fun=@(x) exp(-(x^2))/(x*sqrt(pi))+erf(x) -y;
   x=fzero(fun,x0)

        disp(x)
        %y=1;
        radius_of_curvature=@(r) r*acos(1 - (0.0026*0.0026)/2*(r*r)) - length_f ;
        %x=fzero(fun,x0)

        grwd_r_of_curv(end+1) = fzero(@radius_of_curvature, 0.013)


        
        j = j + 1;
        k = k - 1;
    end 
    %disp(grwd_x)

end 

disp("Choose an ODISI data file...")
file = uigetfile;
DataTable = readtable(file, "FileType","text",'Delimiter', '\t');%triaxialhutchinsondense

gaugepoints = []

gaugepoints(end+1) = 3.865%input("Start of tie rod 1?");
gaugepoints(end+1) =  3.98%input("End of tie rod 1?");

gaugepoints(end+1) =  4.179%input("Start of tie rod 2?");
gaugepoints(end+1) =  4.295%input("End of tie rod 2?");

gaugepoints(end+1) =  5.069%input("Start of retining wall 1, first section?");
gaugepoints(end+1) =  5.166%input("End of retaining wall 1, first section?");

gaugepoints(end+1) =  5.354%input("Start of retining wall 1, second section?");
gaugepoints(end+1) =  5.409%input("End of retaining wall 1, second section?");

gaugepoints(end+1) =  6.421%input("Start of retining wall 2, first section?");
gaugepoints(end+1) =  6.476%input("End of retaining wall 2, first section?");

gaugepoints(end+1) =  6.664%input("Start of retining wall 2, second section?");
gaugepoints(end+1) =  6.729%input("End of retaining wall 2, second section?");


%find x coordanites of start and end of sections
gaugex = [];
gaugey = [];
gauge_starts = [];
gauge_ends = [];
j = 1;
while j < 7
    i = 4;
    while DataTable{2, i} < gaugepoints(2*j - 1)
        i = i + 1;
    end
    gaugestart = i;
    while DataTable{2, i} < gaugepoints(2*j)
        i = i + 1;
    end
    gaugeend = i;

    gauge_starts(end+1) = gaugestart;
    gauge_ends(end+1) = gaugeend;

    i = gaugestart;
    while i < gaugeend
        %create a set of x/y pairs. x is the distance along the gauge, y is
        %the strain at that point
        gaugex(end+1) = DataTable{2, i};
        gaugey(end+1) = DataTable{3, i}; %replace '3' with time of interest
        i = i + 1 ;
    end 
    j = j + 1;
end 



[retainingwall_1x, retainingwall_1y, retainingwall_1s1, retainingwall_1s2, retainingwall_1roc] = get_retaining_wall_data(gauge_starts(3), gauge_ends(4), gauge_ends(3), gauge_starts(4), DataTable)
[retainingwall_2x, retainingwall_2y, retainingwall_2s1, retainingwall_2s2, retainingwall_2roc] = get_retaining_wall_data(gauge_starts(5), gauge_ends(6), gauge_ends(5), gauge_starts(6), DataTable)



    figure;
    tcl=tiledlayout(2, 2);

    hold on
    nexttile(1);
    plot(retainingwall_1x, retainingwall_1y)
    hold on
    plot(retainingwall_1x, retainingwall_1s1)
    hold on
    plot(retainingwall_1x, retainingwall_1s2)

    % hold on
    % nexttile(2);
    % plot(retainingwall_2x, retainingwall_2y)
    % hold on
    % plot(retainingwall_2x, retainingwall_2s1)
    % hold on
    % plot(retainingwall_2x, retainingwall_2s2)
    hold on
    plot(retainingwall_2x, retainingwall_2roc)
            %line("L_CVolume_mm__", "BasePressure_kPa_")
            %xlabel('Vertical Strain (%)');
            %ylabel('Deviator Stress (kPa)');
            %title('Deviator Stress vs Vertical Strain');
            %savefig('sigma_difference.fig')


%plot(gaugex, gaugey)









